import * as React from 'react';
import Svg, { SvgProps } from 'react-native-svg';

export type MySvgProps = React.JSX.IntrinsicAttributes &
  React.JSX.IntrinsicClassAttributes<Svg> &
  Pick<
    Readonly<SvgProps>,
    | 'width'
    | 'height'
    | 'viewBox'
    | 'color'
    | 'title'
    | 'children'
    | 'opacity'
    | 'fill'
    | 'fillOpacity'
    | 'fillRule'
    | 'stroke'
    | 'strokeWidth'
    | 'strokeOpacity'
    | 'strokeDasharray'
    | 'strokeDashoffset'
    | 'strokeLinecap'
    | 'strokeLinejoin'
    | 'strokeMiterlimit'
    | 'vectorEffect'
    | 'clipRule'
    | 'clipPath'
    | 'translate'
    | 'translateX'
    | 'translateY'
    | 'origin'
    | 'originX'
    | 'originY'
    | 'scale'
    | 'scaleX'
    | 'scaleY'
    | 'skew'
    | 'skewX'
    | 'skewY'
    | 'rotation'
    | 'x'
    | 'y'
    | 'transform'
    | 'pointerEvents'
    | 'onStartShouldSetResponder'
    | 'onMoveShouldSetResponder'
    | 'onResponderEnd'
    | 'onResponderGrant'
    | 'onResponderReject'
    | 'onResponderMove'
    | 'onResponderRelease'
    | 'onResponderStart'
    | 'onResponderTerminationRequest'
    | 'onResponderTerminate'
    | 'onStartShouldSetResponderCapture'
    | 'onMoveShouldSetResponderCapture'
    | 'disabled'
    | 'onPress'
    | 'onPressIn'
    | 'onPressOut'
    | 'onLongPress'
    | 'delayPressIn'
    | 'delayPressOut'
    | 'delayLongPress'
    | 'id'
    | 'marker'
    | 'markerStart'
    | 'markerMid'
    | 'markerEnd'
    | 'mask'
    | 'onLayout'
    | 'accessibilityLabel'
    | 'accessible'
    | 'testID'
    | 'font'
    | 'fontStyle'
    | 'fontVariant'
    | 'fontWeight'
    | 'fontStretch'
    | 'fontSize'
    | 'fontFamily'
    | 'textAnchor'
    | 'textDecoration'
    | 'letterSpacing'
    | 'wordSpacing'
    | 'kerning'
    | 'fontFeatureSettings'
    | 'fontVariantLigatures'
    | 'fontVariationSettings'
    | 'hitSlop'
    | 'removeClippedSubviews'
    | 'style'
    | 'nativeID'
    | 'collapsable'
    | 'needsOffscreenAlphaCompositing'
    | 'renderToHardwareTextureAndroid'
    | 'focusable'
    | 'shouldRasterizeIOS'
    | 'isTVSelectable'
    | 'hasTVPreferredFocus'
    | 'tvParallaxProperties'
    | 'tvParallaxShiftDistanceX'
    | 'tvParallaxShiftDistanceY'
    | 'tvParallaxTiltAngle'
    | 'tvParallaxMagnification'
    | 'onTouchStart'
    | 'onTouchMove'
    | 'onTouchEnd'
    | 'onTouchCancel'
    | 'onTouchEndCapture'
    | 'onPointerEnter'
    | 'onPointerEnterCapture'
    | 'onPointerLeave'
    | 'onPointerLeaveCapture'
    | 'onPointerMove'
    | 'onPointerMoveCapture'
    | 'onPointerCancel'
    | 'onPointerCancelCapture'
    | 'onPointerDown'
    | 'onPointerDownCapture'
    | 'onPointerUp'
    | 'onPointerUpCapture'
    | 'accessibilityActions'
    | 'aria-label'
    | 'accessibilityRole'
    | 'accessibilityState'
    | 'aria-busy'
    | 'aria-checked'
    | 'aria-disabled'
    | 'aria-expanded'
    | 'aria-selected'
    | 'aria-labelledby'
    | 'accessibilityHint'
    | 'accessibilityValue'
    | 'aria-valuemax'
    | 'aria-valuemin'
    | 'aria-valuenow'
    | 'aria-valuetext'
    | 'onAccessibilityAction'
    | 'importantForAccessibility'
    | 'aria-hidden'
    | 'aria-live'
    | 'aria-modal'
    | 'role'
    | 'accessibilityLiveRegion'
    | 'accessibilityLabelledBy'
    | 'accessibilityElementsHidden'
    | 'accessibilityViewIsModal'
    | 'onAccessibilityEscape'
    | 'onAccessibilityTap'
    | 'onMagicTap'
    | 'accessibilityIgnoresInvertColors'
    | 'accessibilityLanguage'
  > & { readonly preserveAspectRatio?: string | undefined };
